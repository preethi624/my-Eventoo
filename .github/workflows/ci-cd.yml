name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # runs when you push to main branch

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 3. Build and push backend image
      - name: Build and Push Backend
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/my-backend:latest ./backend
          docker push ${{ secrets.DOCKER_USERNAME }}/my-backend:latest

      # 4. Build and push frontend image
      - name: Build and Push Frontend
        run: |
          docker build \
            --build-arg FRONTEND_VITE_REACT_APP_API_BASE_URL=${{ secrets.FRONTEND_VITE_REACT_APP_API_BASE_URL }} \
            --build-arg FRONTEND_VITE_REACT_APP_SOCKET_URL=${{ secrets.FRONTEND_VITE_REACT_APP_SOCKET_URL }} \
            --build-arg FRONTEND_VITE_REACT_APP_OPENCAGE_API_KEY=${{ secrets.FRONTEND_VITE_REACT_APP_OPENCAGE_API_KEY }} \
            -t ${{ secrets.DOCKER_USERNAME }}/my-frontend:latest ./frontend
          docker push ${{ secrets.DOCKER_USERNAME }}/my-frontend:latest

  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: SSH into EC2 and deploy
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Pull latest images
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/my-backend:latest
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/my-frontend:latest
            
            # Stop old containers if running
            sudo docker stop backend || true
            sudo docker stop frontend || true

            # Remove old containers
            sudo docker rm backend || true
            sudo docker rm frontend || true

            # Run new containers with network and env file
            sudo docker run -d \
              --name backend \
              --network webnet \
              --env-file /home/ubuntu/mern-deploy/.env \
              -p 5000:5000 \
              ${{ secrets.DOCKER_USERNAME }}/my-backend:latest

            sudo docker run -d \
              --name frontend \
              --network webnet \
              -p 8080:80 \
              ${{ secrets.DOCKER_USERNAME }}/my-frontend:latest
